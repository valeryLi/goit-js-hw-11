{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,aAOA,IAAIC,EAAc,EACdC,EAAQ,GAGZ,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,aAAcF,SAASC,cAAc,aAsBvC,SAASE,KAnBT,WACE,MAAMC,EAAS,IAAIC,gBAAgB,CACjCC,IAbY,qCAcZC,EAAGV,EACHW,KAAMZ,EACNa,SAAU,GACVC,WAAY,QACZC,YAAa,cACbC,YAAY,IAGd,OAAOC,MAAM,4BAAeT,KAAUU,MAAKC,IACzC,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAMF,EAASG,QAE3B,OAAOH,EAASI,MAAM,G,EAKxBC,GACGN,MAAKO,KAqCV,SAAuBC,GACrB,MAAMC,EAAOD,EAAKC,KACZC,EAAaC,KAAKC,KAAKJ,EAAKK,UAnEtB,IAqEO,IAAfL,EAAKM,OACPlC,EAAAmC,OAAOC,QACL,4EAMJ,GA0BF,SAA6BT,GAC3B,MAAMU,EAASV,EACZW,KACC,EAACC,cACCA,EAAaC,aACbA,EAAYC,KACZA,EAAIC,MACJA,EAAKC,MACLA,EAAKC,SACLA,EAAQC,UACRA,KAEO,oCAAoCN,4CACrCC,WAAsBC,kHAGOC,wFAGAC,2FAGGC,4FAGCC,4CAO1CC,KAAK,IAER1C,EAAKI,aAAauC,mBAAmB,YAAaV,E,CA9DlDW,CAAoBnB,GAEhB3B,IAAgB4B,EAIlB,YAHA9B,EAAAmC,OAAOc,QACL,8DAKmB,IAAnBrB,EAAKK,WAAmB/B,EAAc,GACxCF,EAAAmC,OAAOe,QAAQ,oBAAoBtB,EAAKK,qBAG1C,IAAIkB,EAAAC,GAAJ,CAAmB,cAAe,CAChCC,SAAS,EACTC,KAAK,EACLC,UAAU,EACVC,gBAAgB,EAChBC,OAAO,EACPC,gBAAgB,EAChBC,eAAgB,I,CAlEdC,CAAcjC,GACdzB,GAAe,EACf2D,EAASC,QAAQxD,SAASC,cAAc,0BAA0B,IAEnEwD,MAAMC,E,CAGX5D,EAAKC,KAAK4D,iBAAiB,UAE3B,SAAsBC,GAMpB,GALAA,EAAMC,iBACNhE,EAAQ+D,EAAME,OAAOC,SAASC,YAAYC,MAAMC,OAEhDtE,EAAc,EACdE,EAAKI,aAAaiE,UAAY,IACzBtE,EAIH,YAHAH,EAAAmC,OAAOC,QACL,4EAIJ3B,G,IAGF,MAAMoD,EAAW,IAAIa,sBACnB,CAACC,EAASC,KACRD,EAAQE,SAAQC,IACVA,EAAMC,gBACRH,EAASI,UAAUF,EAAMV,QAE3B3D,GAAW,GACX,GAEJ,CAAEwE,UAAW,KAqCf,SAASjB,EAAYkB,GACnBC,QAAQC,IAAIF,E","sources":["src/infinity-scroll.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst BASE_URL = 'https://pixabay.com/api/';\nconst API_KEY = '30693529-0739abc7bb5433c19d02cabbb';\n\nlet pageToFetch = 1;\nlet query = '';\nlet perPage = 40;\n\nconst refs = {\n  form: document.querySelector('.search-form'),\n  galleryItems: document.querySelector('.gallery'),\n};\n\nfunction fetchImages() {\n  const params = new URLSearchParams({\n    key: API_KEY,\n    q: query,\n    page: pageToFetch,\n    per_page: 40,\n    image_type: 'photo',\n    orientation: 'orientation',\n    safesearch: true,\n  });\n\n  return fetch(`${BASE_URL}?${params}`).then(response => {\n    if (!response.ok) {\n      throw new Error(response.status);\n    }\n    return response.json();\n  });\n}\n\nfunction getImages() {\n  fetchImages()\n    .then(events => {\n      handleSuccess(events);\n      pageToFetch += 1;\n      observer.observe(document.querySelector('.photo-card:last-child'));\n    })\n    .catch(handleError);\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  query = event.target.elements.searchQuery.value.trim();\n\n  pageToFetch = 1;\n  refs.galleryItems.innerHTML = '';\n  if (!query) {\n    Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n    return;\n  }\n  getImages();\n}\n\nconst observer = new IntersectionObserver(\n  (entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting) {\n        observer.unobserve(entry.target);\n      }\n      getImages();\n    });\n  },\n  { threshold: 0.5 }\n);\n\nfunction handleSuccess(data) {\n  const hits = data.hits;\n  const totalPages = Math.ceil(data.totalHits / perPage);\n\n  if (data.total === 0) {\n    Notify.failure(\n      'Sorry, there are no images matching your search query. Please try again.'\n    );\n  }\n\n  createGalleryMarkup(hits);\n\n  if (pageToFetch === totalPages) {\n    Notify.warning(\n      \"We're sorry, but you've reached the end of search results.\"\n    );\n    return;\n  }\n\n  if (data.totalHits !== 0 && pageToFetch < 2) {\n    Notify.success(`Hooray! We found ${data.totalHits} images.`);\n  }\n\n  new SimpleLightbox('.photo-link', {\n    overlay: true,\n    nav: true,\n    docClose: true,\n    animationSlide: true,\n    close: true,\n    enableKeyboard: true,\n    overlayOpacity: 0.8,\n  });\n}\n\nfunction handleError(error) {\n  console.log(error);\n}\n\nfunction createGalleryMarkup(events) {\n  const markup = events\n    .map(\n      ({\n        largeImageURL,\n        webformatURL,\n        tags,\n        likes,\n        views,\n        comments,\n        downloads,\n      }) => {\n        return `<a class='photo-link link' href=\"${largeImageURL}\"><div class=\"photo-card\">\n  <img src=\"${webformatURL}\" alt=\"${tags}\" loading=\"lazy\"/>\n  <div class=\"info\">\n    <p class=\"info-item\">\n      <b><span class='text'>Likes</span> ${likes}</b>\n    </p>\n    <p class=\"info-item\">\n      <b><span class='text'>Views</span> ${views}</b>\n    </p>\n    <p class=\"info-item\">\n      <b><span class='text'>Comments</span> ${comments}</b>\n    </p>\n    <p class=\"info-item\">\n      <b><span class='text'>Downloads</span> ${downloads}</b>\n    </p>\n  </div>\n</div>\n</a>`;\n      }\n    )\n    .join('');\n\n  refs.galleryItems.insertAdjacentHTML('beforeend', markup);\n}\n"],"names":["$iQIUW","parcelRequire","$dccac61c0825aa4e$var$pageToFetch","$dccac61c0825aa4e$var$query","$dccac61c0825aa4e$var$refs","form","document","querySelector","galleryItems","$dccac61c0825aa4e$var$getImages","params","URLSearchParams","key","q","page","per_page","image_type","orientation","safesearch","fetch","then","response","ok","Error","status","json","$dccac61c0825aa4e$var$fetchImages","events","data","hits","totalPages","Math","ceil","totalHits","total","Notify","failure","markup","map","largeImageURL","webformatURL","tags","likes","views","comments","downloads","join","insertAdjacentHTML","$dccac61c0825aa4e$var$createGalleryMarkup","warning","success","$parcel$interopDefault","$fZKcF","overlay","nav","docClose","animationSlide","close","enableKeyboard","overlayOpacity","$dccac61c0825aa4e$var$handleSuccess","$dccac61c0825aa4e$var$observer","observe","catch","$dccac61c0825aa4e$var$handleError","addEventListener","event","preventDefault","target","elements","searchQuery","value","trim","innerHTML","IntersectionObserver","entries","observer1","forEach","entry","isIntersecting","unobserve","threshold","error","console","log"],"version":3,"file":"infiniti-scroll.30a8db1c.js.map"}